from asyncio.windows_events import NULL
from aiogram import types
#from aiogram.types.callback_query import CallbackQuery
#from aiogram.types.message import Message
#from aiogram.dispatcher.filters import Command

from datetime import datetime, timedelta

from aiogram.types.user import User

from utils.db_api.sqlighter import SQL

#–ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
from keyboards.inline.inline_main_menu import inkb_main_menu
from keyboards.inline.result_menu import inkb_result_menu
from keyboards.inline.contests_menu import inkb_contests_menu
from keyboards.inline.subscriptions_menu import inkb_subscriptions_menu

from loader import dp
import logging
from data import config

@dp.message_handler(commands=['–ú–µ–Ω—é', 'menu'], commands_prefix = ['‚†Ä','/'])
async def show_main_menu(message: types.Message):
    await message.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=inkb_main_menu)


@dp.callback_query_handler(text_contains='back')
async def back_main_menu(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data=}")

    await call.message.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=inkb_main_menu)

@dp.callback_query_handler(text_contains="main:what_now")
async def show_what_now(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
    """

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data=}")
    # —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç–∞
    # TODO: –∑–∞–º–µ–Ω–∏—Ç—å tdate
    # tdate = datetime.now() + timedelta(hours=config.DELTA)
    tdate = datetime(2021, 7, 18, 19, 29) + timedelta(hours=config.DELTA)
    dt_start = SQL.get_date_start()
    dt_end = SQL.get_date_end()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—Å—è –ª–∏ —Ñ–µ—Å—Ç–∏–≤–∞–ª—å
    if tdate < dt_start:
        await call.message.answer("üòÅ –§–µ—Å—Ç–∏–≤–∞–ª—å –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è, \n–ó–∞–≥–ª—è–Ω–∏ —Å—é–¥–∞ 18 –∏—é–Ω—è!")
    elif tdate > dt_end:
        await call.message.answer("‚òπ –ö —Å–æ–∂–µ–ª–µ–Ω–∏—é, —Ñ–µ—Å—Ç–∏–≤–∞–ª—å —É–∂–µ –ø—Ä–æ—à–µ–ª.\n–£–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É! üòÅ")
    else:
        await call.message.answer(text='ü§ì –°–µ–π—á–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç ü§ì')
        
        # –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        rq = SQL.what_now_db(tdate)
       
        # –∑–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
        for event in rq:
            # –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
            event_name = event[0]
            # time_start = event[1].strftime('%d.%m %H:%M')
            # time_end = event[2].strftime('%d.%m %H:%M')
            # address = event[3]
            # contains = event[4]

            # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–Ω–∫—É—Ä—Å–µ
            await call.message.answer(event_name)


@dp.callback_query_handler(text_contains="main:what_next")
async def show_what_next(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ
    """
    #TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é show_what_next. –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç?

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data=}")
    
    # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏, –∞ —Ç–∞–∫ –∂–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ñ–µ—Å—Ç–∏–≤–∞–ª—è
    # TODO: –∑–∞–º–µ–Ω–∏—Ç—å tdate
    # tdate = datetime.now() + timedelta(hours=config.DELTA)
    tdate = datetime(2021, 7, 18, 19, 29) + timedelta(hours=config.DELTA)
    dt_end = SQL.get_date_end()
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ —Ñ–µ—Å—Ç–∏–≤–∞–ª—å
    if tdate >= dt_end:
        await call.message.answer("‚òπ –ö —Å–æ–∂–µ–ª–µ–Ω–∏—é, —Ñ–µ—Å—Ç–∏–≤–∞–ª—å —É–∂–µ –ø—Ä–æ—à–µ–ª.\n–£–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É! üòÅ")
    else:
        # –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ë–î –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        rq = SQL.what_next_db(tdate)

        # –∑–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
        for event in rq:
            # –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
            event_name = event[0]
            time_start = event[1].strftime('%d.%m %H:%M')
            # time_end = event[2].strftime('%d.%m %H:%M')
            # address = event[3]
            # contains = event[4]
            await call.message.answer(f"{event_name}\n–ù–∞—á–∞–ª–æ: {time_start}")


@dp.callback_query_handler(text_contains="main:full_schedule")
async def show_full_schedule(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    """
    #TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é show_full_schedule

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data=}")
    
    await call.message.answer("–í–æ—Ç –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    pass


@dp.callback_query_handler(text_contains="main:results")
async def show_results_menu(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data=}")
    
    await call.message.answer("–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–±—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", reply_markup=inkb_result_menu)


@dp.callback_query_handler(text_contains="main:contests")
async def show_contests_menu(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é –∫–æ–Ω–∫—É—Ä—Å–æ–≤
    """

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data=}")

    
    await call.message.answer("–í—ã–±–∏—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∫–æ–Ω–∫—É—Ä—Å", reply_markup=inkb_contests_menu)
    pass


@dp.callback_query_handler(text_contains="main:subscriptions")
async def show_subscriptions_menu(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫
    """
    #TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é show_subscriptions_menu

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data=}")
    
    message_user = User.get_current()['id']
    rq = SQL.get_users_subs(message_user)
    if rq == []:
        await call.message.answer(text="–ö —Å–æ–∂–µ–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫, —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è?",reply_markup=inkb_subscriptions_menu)
    else:
        await call.message.answer(text="–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã –Ω–∞:")
        await call.message.answer(rq)
        await call.message.answer(text="–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–ø–∏—Å–æ–∫",reply_markup=inkb_subscriptions_menu)


@dp.callback_query_handler(text_contains="main:map")
async def show_map(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–µ–∞—Ä—Ç—É —Ñ–µ—Å—Ç–∏–≤–∞–ª—è
    """
    #TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é show_map

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data=}")
    
    await call.message.answer("–í–æ—Ç –∫–∞—Ä—Ç–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è")
    pass


@dp.callback_query_handler(text_contains="main:share")
async def show_share(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é QR-–∫–æ–¥ —Å–æ —Å—ã–ª–∫–æ–π –Ω–∞ —ç—Ç–æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç
    """
    #TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é show_share

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data=}")
    
    await call.message.answer("–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞")
    pass


@dp.callback_query_handler(text_contains="main:about")
async def show_about(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º —Ñ–µ—Å—Ç–∏–≤–∞–ª—è
    """
    #TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é show_about

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data=}")
    
    await call.message.answer("–ü–æ–ª–æ–∂–µ–Ω–∏–µ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è –°–≤–∞—Ä–æ–æ–≥2022")
    pass
